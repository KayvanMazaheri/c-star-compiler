Useless nonterminals:

   Logic
   Aop
   IDD
   AopLogic


Useless rules:

#48    Logic :	 LOGIC_AND;
#49    Logic :	 LOGIC_OR;
#50    Logic :	 '<';
#51    Logic :	 '>';
#52    Logic :	 GTE;
#53    Logic :	 LTE;
#54    Logic :	 EQU;
#55    Logic :	 NEQ;
#56    Aop :	 '+';
#57    Aop :	 '-';
#58    Aop :	 '*';
#59    Aop :	 '/';
#60    Aop :	 '%';
#65    IDD :	 ID IDDRight;
#69    AopLogic :	 Aop;
#70    AopLogic :	 Logic;


Conflict in state 72 between rule 93 and token IN resolved as reduce.
Conflict in state 72 between rule 93 and token LTE resolved as reduce.
Conflict in state 72 between rule 93 and token GTE resolved as reduce.
Conflict in state 72 between rule 93 and token EQU resolved as reduce.
Conflict in state 72 between rule 93 and token NEQ resolved as reduce.
Conflict in state 72 between rule 93 and token LOGIC_AND resolved as reduce.
Conflict in state 72 between rule 93 and token LOGIC_OR resolved as reduce.
Conflict in state 72 between rule 93 and token '>' resolved as reduce.
Conflict in state 72 between rule 93 and token '<' resolved as reduce.
Conflict in state 72 between rule 93 and token '+' resolved as reduce.
Conflict in state 72 between rule 93 and token '-' resolved as reduce.
Conflict in state 72 between rule 93 and token '*' resolved as reduce.
Conflict in state 72 between rule 93 and token '/' resolved as reduce.
Conflict in state 72 between rule 93 and token '%' resolved as reduce.
Conflict in state 111 between rule 94 and token IN resolved as reduce.
Conflict in state 111 between rule 94 and token LTE resolved as shift.
Conflict in state 111 between rule 94 and token GTE resolved as shift.
Conflict in state 111 between rule 94 and token EQU resolved as shift.
Conflict in state 111 between rule 94 and token NEQ resolved as shift.
Conflict in state 111 between rule 94 and token LOGIC_AND resolved as shift.
Conflict in state 111 between rule 94 and token LOGIC_OR resolved as shift.
Conflict in state 111 between rule 94 and token '>' resolved as shift.
Conflict in state 111 between rule 94 and token '<' resolved as shift.
Conflict in state 111 between rule 94 and token '+' resolved as shift.
Conflict in state 111 between rule 94 and token '-' resolved as shift.
Conflict in state 111 between rule 94 and token '*' resolved as shift.
Conflict in state 111 between rule 94 and token '/' resolved as shift.
Conflict in state 111 between rule 94 and token '%' resolved as shift.
Conflict in state 114 between rule 82 and token IN resolved as reduce.
Conflict in state 114 between rule 82 and token LTE resolved as reduce.
Conflict in state 114 between rule 82 and token GTE resolved as reduce.
Conflict in state 114 between rule 82 and token EQU resolved as reduce.
Conflict in state 114 between rule 82 and token NEQ resolved as reduce.
Conflict in state 114 between rule 82 and token LOGIC_AND resolved as reduce.
Conflict in state 114 between rule 82 and token LOGIC_OR resolved as reduce.
Conflict in state 114 between rule 82 and token '>' resolved as reduce.
Conflict in state 114 between rule 82 and token '<' resolved as reduce.
Conflict in state 114 between rule 82 and token '+' resolved as shift.
Conflict in state 114 between rule 82 and token '-' resolved as shift.
Conflict in state 114 between rule 82 and token '*' resolved as shift.
Conflict in state 114 between rule 82 and token '/' resolved as shift.
Conflict in state 114 between rule 82 and token '%' resolved as shift.
Conflict in state 115 between rule 81 and token IN resolved as reduce.
Conflict in state 115 between rule 81 and token LTE resolved as reduce.
Conflict in state 115 between rule 81 and token GTE resolved as reduce.
Conflict in state 115 between rule 81 and token EQU resolved as reduce.
Conflict in state 115 between rule 81 and token NEQ resolved as reduce.
Conflict in state 115 between rule 81 and token LOGIC_AND resolved as reduce.
Conflict in state 115 between rule 81 and token LOGIC_OR resolved as reduce.
Conflict in state 115 between rule 81 and token '>' resolved as reduce.
Conflict in state 115 between rule 81 and token '<' resolved as reduce.
Conflict in state 115 between rule 81 and token '+' resolved as shift.
Conflict in state 115 between rule 81 and token '-' resolved as shift.
Conflict in state 115 between rule 81 and token '*' resolved as shift.
Conflict in state 115 between rule 81 and token '/' resolved as shift.
Conflict in state 115 between rule 81 and token '%' resolved as shift.
Conflict in state 116 between rule 83 and token IN resolved as reduce.
Conflict in state 116 between rule 83 and token LTE resolved as shift.
Conflict in state 116 between rule 83 and token GTE resolved as shift.
Conflict in state 116 between rule 83 and token EQU resolved as reduce.
Conflict in state 116 between rule 83 and token NEQ resolved as reduce.
Conflict in state 116 between rule 83 and token LOGIC_AND resolved as reduce.
Conflict in state 116 between rule 83 and token LOGIC_OR resolved as reduce.
Conflict in state 116 between rule 83 and token '>' resolved as shift.
Conflict in state 116 between rule 83 and token '<' resolved as shift.
Conflict in state 116 between rule 83 and token '+' resolved as shift.
Conflict in state 116 between rule 83 and token '-' resolved as shift.
Conflict in state 116 between rule 83 and token '*' resolved as shift.
Conflict in state 116 between rule 83 and token '/' resolved as shift.
Conflict in state 116 between rule 83 and token '%' resolved as shift.
Conflict in state 117 between rule 84 and token IN resolved as reduce.
Conflict in state 117 between rule 84 and token LTE resolved as shift.
Conflict in state 117 between rule 84 and token GTE resolved as shift.
Conflict in state 117 between rule 84 and token EQU resolved as reduce.
Conflict in state 117 between rule 84 and token NEQ resolved as reduce.
Conflict in state 117 between rule 84 and token LOGIC_AND resolved as reduce.
Conflict in state 117 between rule 84 and token LOGIC_OR resolved as reduce.
Conflict in state 117 between rule 84 and token '>' resolved as shift.
Conflict in state 117 between rule 84 and token '<' resolved as shift.
Conflict in state 117 between rule 84 and token '+' resolved as shift.
Conflict in state 117 between rule 84 and token '-' resolved as shift.
Conflict in state 117 between rule 84 and token '*' resolved as shift.
Conflict in state 117 between rule 84 and token '/' resolved as shift.
Conflict in state 117 between rule 84 and token '%' resolved as shift.
Conflict in state 118 between rule 77 and token IN resolved as reduce.
Conflict in state 118 between rule 77 and token LTE resolved as shift.
Conflict in state 118 between rule 77 and token GTE resolved as shift.
Conflict in state 118 between rule 77 and token EQU resolved as shift.
Conflict in state 118 between rule 77 and token NEQ resolved as shift.
Conflict in state 118 between rule 77 and token LOGIC_AND resolved as reduce.
Conflict in state 118 between rule 77 and token LOGIC_OR resolved as reduce.
Conflict in state 118 between rule 77 and token '>' resolved as shift.
Conflict in state 118 between rule 77 and token '<' resolved as shift.
Conflict in state 118 between rule 77 and token '+' resolved as shift.
Conflict in state 118 between rule 77 and token '-' resolved as shift.
Conflict in state 118 between rule 77 and token '*' resolved as shift.
Conflict in state 118 between rule 77 and token '/' resolved as shift.
Conflict in state 118 between rule 77 and token '%' resolved as shift.
Conflict in state 119 between rule 78 and token IN resolved as reduce.
Conflict in state 119 between rule 78 and token LTE resolved as shift.
Conflict in state 119 between rule 78 and token GTE resolved as shift.
Conflict in state 119 between rule 78 and token EQU resolved as shift.
Conflict in state 119 between rule 78 and token NEQ resolved as shift.
Conflict in state 119 between rule 78 and token LOGIC_AND resolved as shift.
Conflict in state 119 between rule 78 and token LOGIC_OR resolved as reduce.
Conflict in state 119 between rule 78 and token '>' resolved as shift.
Conflict in state 119 between rule 78 and token '<' resolved as shift.
Conflict in state 119 between rule 78 and token '+' resolved as shift.
Conflict in state 119 between rule 78 and token '-' resolved as shift.
Conflict in state 119 between rule 78 and token '*' resolved as shift.
Conflict in state 119 between rule 78 and token '/' resolved as shift.
Conflict in state 119 between rule 78 and token '%' resolved as shift.
Conflict in state 120 between rule 80 and token IN resolved as reduce.
Conflict in state 120 between rule 80 and token LTE resolved as reduce.
Conflict in state 120 between rule 80 and token GTE resolved as reduce.
Conflict in state 120 between rule 80 and token EQU resolved as reduce.
Conflict in state 120 between rule 80 and token NEQ resolved as reduce.
Conflict in state 120 between rule 80 and token LOGIC_AND resolved as reduce.
Conflict in state 120 between rule 80 and token LOGIC_OR resolved as reduce.
Conflict in state 120 between rule 80 and token '>' resolved as reduce.
Conflict in state 120 between rule 80 and token '<' resolved as reduce.
Conflict in state 120 between rule 80 and token '+' resolved as shift.
Conflict in state 120 between rule 80 and token '-' resolved as shift.
Conflict in state 120 between rule 80 and token '*' resolved as shift.
Conflict in state 120 between rule 80 and token '/' resolved as shift.
Conflict in state 120 between rule 80 and token '%' resolved as shift.
Conflict in state 121 between rule 79 and token IN resolved as reduce.
Conflict in state 121 between rule 79 and token LTE resolved as reduce.
Conflict in state 121 between rule 79 and token GTE resolved as reduce.
Conflict in state 121 between rule 79 and token EQU resolved as reduce.
Conflict in state 121 between rule 79 and token NEQ resolved as reduce.
Conflict in state 121 between rule 79 and token LOGIC_AND resolved as reduce.
Conflict in state 121 between rule 79 and token LOGIC_OR resolved as reduce.
Conflict in state 121 between rule 79 and token '>' resolved as reduce.
Conflict in state 121 between rule 79 and token '<' resolved as reduce.
Conflict in state 121 between rule 79 and token '+' resolved as shift.
Conflict in state 121 between rule 79 and token '-' resolved as shift.
Conflict in state 121 between rule 79 and token '*' resolved as shift.
Conflict in state 121 between rule 79 and token '/' resolved as shift.
Conflict in state 121 between rule 79 and token '%' resolved as shift.
Conflict in state 122 between rule 72 and token IN resolved as reduce.
Conflict in state 122 between rule 72 and token LTE resolved as reduce.
Conflict in state 122 between rule 72 and token GTE resolved as reduce.
Conflict in state 122 between rule 72 and token EQU resolved as reduce.
Conflict in state 122 between rule 72 and token NEQ resolved as reduce.
Conflict in state 122 between rule 72 and token LOGIC_AND resolved as reduce.
Conflict in state 122 between rule 72 and token LOGIC_OR resolved as reduce.
Conflict in state 122 between rule 72 and token '>' resolved as reduce.
Conflict in state 122 between rule 72 and token '<' resolved as reduce.
Conflict in state 122 between rule 72 and token '+' resolved as reduce.
Conflict in state 122 between rule 72 and token '-' resolved as reduce.
Conflict in state 122 between rule 72 and token '*' resolved as shift.
Conflict in state 122 between rule 72 and token '/' resolved as shift.
Conflict in state 122 between rule 72 and token '%' resolved as shift.
Conflict in state 123 between rule 73 and token IN resolved as reduce.
Conflict in state 123 between rule 73 and token LTE resolved as reduce.
Conflict in state 123 between rule 73 and token GTE resolved as reduce.
Conflict in state 123 between rule 73 and token EQU resolved as reduce.
Conflict in state 123 between rule 73 and token NEQ resolved as reduce.
Conflict in state 123 between rule 73 and token LOGIC_AND resolved as reduce.
Conflict in state 123 between rule 73 and token LOGIC_OR resolved as reduce.
Conflict in state 123 between rule 73 and token '>' resolved as reduce.
Conflict in state 123 between rule 73 and token '<' resolved as reduce.
Conflict in state 123 between rule 73 and token '+' resolved as reduce.
Conflict in state 123 between rule 73 and token '-' resolved as reduce.
Conflict in state 123 between rule 73 and token '*' resolved as shift.
Conflict in state 123 between rule 73 and token '/' resolved as shift.
Conflict in state 123 between rule 73 and token '%' resolved as shift.
Conflict in state 124 between rule 74 and token IN resolved as reduce.
Conflict in state 124 between rule 74 and token LTE resolved as reduce.
Conflict in state 124 between rule 74 and token GTE resolved as reduce.
Conflict in state 124 between rule 74 and token EQU resolved as reduce.
Conflict in state 124 between rule 74 and token NEQ resolved as reduce.
Conflict in state 124 between rule 74 and token LOGIC_AND resolved as reduce.
Conflict in state 124 between rule 74 and token LOGIC_OR resolved as reduce.
Conflict in state 124 between rule 74 and token '>' resolved as reduce.
Conflict in state 124 between rule 74 and token '<' resolved as reduce.
Conflict in state 124 between rule 74 and token '+' resolved as reduce.
Conflict in state 124 between rule 74 and token '-' resolved as reduce.
Conflict in state 124 between rule 74 and token '*' resolved as reduce.
Conflict in state 124 between rule 74 and token '/' resolved as reduce.
Conflict in state 124 between rule 74 and token '%' resolved as reduce.
Conflict in state 125 between rule 75 and token IN resolved as reduce.
Conflict in state 125 between rule 75 and token LTE resolved as reduce.
Conflict in state 125 between rule 75 and token GTE resolved as reduce.
Conflict in state 125 between rule 75 and token EQU resolved as reduce.
Conflict in state 125 between rule 75 and token NEQ resolved as reduce.
Conflict in state 125 between rule 75 and token LOGIC_AND resolved as reduce.
Conflict in state 125 between rule 75 and token LOGIC_OR resolved as reduce.
Conflict in state 125 between rule 75 and token '>' resolved as reduce.
Conflict in state 125 between rule 75 and token '<' resolved as reduce.
Conflict in state 125 between rule 75 and token '+' resolved as reduce.
Conflict in state 125 between rule 75 and token '-' resolved as reduce.
Conflict in state 125 between rule 75 and token '*' resolved as reduce.
Conflict in state 125 between rule 75 and token '/' resolved as reduce.
Conflict in state 125 between rule 75 and token '%' resolved as reduce.
Conflict in state 126 between rule 76 and token IN resolved as reduce.
Conflict in state 126 between rule 76 and token LTE resolved as reduce.
Conflict in state 126 between rule 76 and token GTE resolved as reduce.
Conflict in state 126 between rule 76 and token EQU resolved as reduce.
Conflict in state 126 between rule 76 and token NEQ resolved as reduce.
Conflict in state 126 between rule 76 and token LOGIC_AND resolved as reduce.
Conflict in state 126 between rule 76 and token LOGIC_OR resolved as reduce.
Conflict in state 126 between rule 76 and token '>' resolved as reduce.
Conflict in state 126 between rule 76 and token '<' resolved as reduce.
Conflict in state 126 between rule 76 and token '+' resolved as reduce.
Conflict in state 126 between rule 76 and token '-' resolved as reduce.
Conflict in state 126 between rule 76 and token '*' resolved as reduce.
Conflict in state 126 between rule 76 and token '/' resolved as reduce.
Conflict in state 126 between rule 76 and token '%' resolved as reduce.
Conflict in state 135 between rule 34 and token ELSE resolved as shift.
Conflict in state 156 between rule 43 and token IN resolved as reduce.
Conflict in state 156 between rule 43 and token LTE resolved as shift.
Conflict in state 156 between rule 43 and token GTE resolved as shift.
Conflict in state 156 between rule 43 and token EQU resolved as shift.
Conflict in state 156 between rule 43 and token NEQ resolved as shift.
Conflict in state 156 between rule 43 and token LOGIC_AND resolved as shift.
Conflict in state 156 between rule 43 and token LOGIC_OR resolved as shift.
Conflict in state 156 between rule 43 and token '>' resolved as shift.
Conflict in state 156 between rule 43 and token '<' resolved as shift.
Conflict in state 156 between rule 43 and token '+' resolved as shift.
Conflict in state 156 between rule 43 and token '-' resolved as shift.
Conflict in state 156 between rule 43 and token '*' resolved as shift.
Conflict in state 156 between rule 43 and token '/' resolved as shift.
Conflict in state 156 between rule 43 and token '%' resolved as shift.

Grammar
rule 1    Program -> PROGRAM ID ';' DecList '{' SList '}' '.'
rule 2    DecList -> Dec DecList
rule 3    DecList ->		/* empty */
rule 4    Dec -> VarDecs
rule 5    Dec -> FuncDecs
rule 6    FuncDecs -> FuncDec FuncDecs
rule 7    FuncDecs -> FuncDec END
rule 8    VarDecs -> VarDec VarDecs
rule 9    VarDecs -> VarDec END
rule 10   VarDec -> VAR Type IDDList ';'
rule 11   Type -> INT
rule 12   Type -> DOUBLE
rule 13   Type -> BOOL
rule 14   Type -> CHAR
rule 15   IDDim -> ID
rule 16   IDDim -> IDDim '[' IntNumber ']'
rule 17   IDDList -> IDDim ','
rule 18   IDDList -> IDDim
rule 19   IDList -> ID ',' IDList
rule 20   IDList -> ID
rule 21   FuncDec -> DEF Type ID '(' ArgsList ')' '{' SList '}' ';'
rule 22   ArgsList -> ArgList
rule 23   ArgsList ->		/* empty */
rule 24   ArgList -> Arg ';' ArgList
rule 25   ArgList -> Arg
rule 26   Arg -> Type IDList
rule 27   SList -> Stmt ';' SList
rule 28   SList ->		/* empty */
rule 29   Stmt -> Exp
rule 30   Stmt -> VarDecs
rule 31   Stmt -> FOR LValue '=' Exp '(' TO
rule 32   Stmt -> DOWN TO ')' Exp DO Block
rule 33   Stmt -> WHILE Exp DO Block
rule 34   Stmt -> IF Exp THEN Block
rule 35   Stmt -> IF Exp THEN Block ELSE Block
rule 36   Stmt -> SWITCH Exp OF '{' Cases '}'
rule 37   Stmt -> BREAK
rule 38   Stmt -> REPEAT Block UNTIL Exp
rule 39   Stmt -> CONTINUE
rule 40   Stmt -> RETURN Exp
rule 41   Stmt -> WRITE ExpPlus
rule 42   Stmt -> READ '(' LValue ')'
rule 43   Range -> Exp RANGE_DOTS Exp
rule 44   Cases -> Case Cases '.'
rule 45   Cases -> Case END
rule 46   Case -> CASE Exp ':' Block
rule 47   Case -> CASE Range ':' Block
rule 61   ExpList -> ExpPlus
rule 62   ExpList ->		/* empty */
rule 63   ExpPlus -> Exp ',' ExpPlus
rule 64   ExpPlus -> Exp
rule 66   IDDRight -> '[' Exp ']' IDDRight
rule 67   IDDRight ->		/* empty */
rule 68   LValue -> ID IDDRight
rule 71   Exp -> ExpRight
rule 72   Exp -> Exp '+' Exp
rule 73   Exp -> Exp '-' Exp
rule 74   Exp -> Exp '*' Exp
rule 75   Exp -> Exp '/' Exp
rule 76   Exp -> Exp '%' Exp
rule 77   Exp -> Exp LOGIC_AND Exp
rule 78   Exp -> Exp LOGIC_OR Exp
rule 79   Exp -> Exp '<' Exp
rule 80   Exp -> Exp '>' Exp
rule 81   Exp -> Exp GTE Exp
rule 82   Exp -> Exp LTE Exp
rule 83   Exp -> Exp EQU Exp
rule 84   Exp -> Exp NEQ Exp
rule 85   Exp -> Exp IN Range
rule 86   ExpRight -> IntNumber
rule 87   ExpRight -> RealNumber
rule 88   ExpRight -> LValue
rule 89   ExpRight -> CHARACTER
rule 90   ExpRight -> STRING
rule 91   ExpRight -> TRUE
rule 92   ExpRight -> FALSE
rule 93   ExpRight -> '-' Exp
rule 94   ExpRight -> LValue '=' Exp
rule 95   ExpRight -> '(' Exp ')'
rule 96   ExpRight -> '(' ID '(' ExpList ')' ')'
rule 97   Block -> Stmt
rule 98   Block -> '{' SList '}'

Terminals, with rules where they appear

$ (-1)
'%' (37) 60 76
'(' (40) 21 31 42 95 96
')' (41) 21 32 42 95 96
'*' (42) 58 74
'+' (43) 56 72
',' (44) 17 19 63
'-' (45) 57 73 93
'.' (46) 1 44
'/' (47) 59 75
':' (58) 46 47
';' (59) 1 10 21 24 27
'<' (60) 50 79
'=' (61) 31 94
'>' (62) 51 80
'[' (91) 16 66
']' (93) 16 66
'{' (123) 1 21 36 98
'}' (125) 1 21 36 98
error (256)
CHAR (258) 14
INT (259) 11
DOUBLE (260) 12
PROGRAM (261) 1
BOOL (262) 13
FOR (263) 31
TO (264) 31 32
DOWN (265) 32
WHILE (266) 33
IF (267) 34 35
THEN (268) 34 35
ELSE (269) 35
SWITCH (270) 36
CASE (271) 46 47
OF (272) 36
BREAK (273) 37
REPEAT (274) 38
CONTINUE (275) 39
RETURN (276) 40
WRITE (277) 41
READ (278) 42
TRUE (279) 91
FALSE (280) 92
IN (281) 85
END (282) 7 9 45
ID (283) 1 15 19 20 21 65 68 96
IntNumber (284) 16 86
RealNumber (285) 87
STRING (286) 90
CHARACTER (287) 89
LTE (288) 53 82
GTE (289) 52 81
EQU (290) 54 83
NEQ (291) 55 84
RANGE_DOTS (292) 43
LOGIC_AND (293) 48 77
LOGIC_OR (294) 49 78
UNTIL (295) 38
DO (296) 32 33
VAR (297) 10
DEF (298) 21
IFX (299)
NEG (300)

Nonterminals, with rules where they appear

Program (64)
    on left: 1
DecList (65)
    on left: 2 3, on right: 1 2
Dec (66)
    on left: 4 5, on right: 2
FuncDecs (67)
    on left: 6 7, on right: 5 6
VarDecs (68)
    on left: 8 9, on right: 4 8 30
VarDec (69)
    on left: 10, on right: 8 9
Type (70)
    on left: 11 12 13 14, on right: 10 21 26
IDDim (71)
    on left: 15 16, on right: 16 17 18
IDDList (72)
    on left: 17 18, on right: 10
IDList (73)
    on left: 19 20, on right: 19 26
FuncDec (74)
    on left: 21, on right: 6 7
ArgsList (75)
    on left: 22 23, on right: 21
ArgList (76)
    on left: 24 25, on right: 22 24
Arg (77)
    on left: 26, on right: 24 25
SList (78)
    on left: 27 28, on right: 1 21 27 98
Stmt (79)
    on left: 29 30 31 32 33 34 35 36 37 38 39 40 41 42,
    on right: 27 97
Range (80)
    on left: 43, on right: 47 85
Cases (81)
    on left: 44 45, on right: 36 44
Case (82)
    on left: 46 47, on right: 44 45
ExpList (83)
    on left: 61 62, on right: 96
ExpPlus (84)
    on left: 63 64, on right: 41 61 63
IDDRight (85)
    on left: 66 67, on right: 65 66 68
LValue (86)
    on left: 68, on right: 31 42 88 94
Exp (87)
    on left: 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85,
    on right: 29 31 32 33 34 35 36 38 40 43 46 63 64 66 72 73 74 75
    76 77 78 79 80 81 82 83 84 85 93 94 95
ExpRight (88)
    on left: 86 87 88 89 90 91 92 93 94 95 96, on right: 71
Block (89)
    on left: 97 98, on right: 32 33 34 35 38 46 47


state 0

    PROGRAM	shift, and go to state 1

    Program	go to state 175



state 1

    Program  ->  PROGRAM . ID ';' DecList '{' SList '}' '.'   (rule 1)

    ID  	shift, and go to state 2



state 2

    Program  ->  PROGRAM ID . ';' DecList '{' SList '}' '.'   (rule 1)

    ';' 	shift, and go to state 3



state 3

    Program  ->  PROGRAM ID ';' . DecList '{' SList '}' '.'   (rule 1)

    VAR 	shift, and go to state 4
    DEF 	shift, and go to state 5

    $default	reduce using rule 3 (DecList)

    DecList	go to state 6
    Dec 	go to state 7
    FuncDecs	go to state 8
    VarDecs	go to state 9
    VarDec	go to state 10
    FuncDec	go to state 11



state 4

    VarDec  ->  VAR . Type IDDList ';'   (rule 10)

    CHAR	shift, and go to state 12
    INT 	shift, and go to state 13
    DOUBLE	shift, and go to state 14
    BOOL	shift, and go to state 15

    Type	go to state 16



state 5

    FuncDec  ->  DEF . Type ID '(' ArgsList ')' '{' SList '}' ';'   (rule 21)

    CHAR	shift, and go to state 12
    INT 	shift, and go to state 13
    DOUBLE	shift, and go to state 14
    BOOL	shift, and go to state 15

    Type	go to state 17



state 6

    Program  ->  PROGRAM ID ';' DecList . '{' SList '}' '.'   (rule 1)

    '{' 	shift, and go to state 18



state 7

    DecList  ->  Dec . DecList   (rule 2)

    VAR 	shift, and go to state 4
    DEF 	shift, and go to state 5

    $default	reduce using rule 3 (DecList)

    DecList	go to state 19
    Dec 	go to state 7
    FuncDecs	go to state 8
    VarDecs	go to state 9
    VarDec	go to state 10
    FuncDec	go to state 11



state 8

    Dec  ->  FuncDecs .   (rule 5)

    $default	reduce using rule 5 (Dec)



state 9

    Dec  ->  VarDecs .   (rule 4)

    $default	reduce using rule 4 (Dec)



state 10

    VarDecs  ->  VarDec . VarDecs   (rule 8)
    VarDecs  ->  VarDec . END   (rule 9)

    END 	shift, and go to state 20
    VAR 	shift, and go to state 4

    VarDecs	go to state 21
    VarDec	go to state 10



state 11

    FuncDecs  ->  FuncDec . FuncDecs   (rule 6)
    FuncDecs  ->  FuncDec . END   (rule 7)

    END 	shift, and go to state 22
    DEF 	shift, and go to state 5

    FuncDecs	go to state 23
    FuncDec	go to state 11



state 12

    Type  ->  CHAR .   (rule 14)

    $default	reduce using rule 14 (Type)



state 13

    Type  ->  INT .   (rule 11)

    $default	reduce using rule 11 (Type)



state 14

    Type  ->  DOUBLE .   (rule 12)

    $default	reduce using rule 12 (Type)



state 15

    Type  ->  BOOL .   (rule 13)

    $default	reduce using rule 13 (Type)



state 16

    VarDec  ->  VAR Type . IDDList ';'   (rule 10)

    ID  	shift, and go to state 24

    IDDim	go to state 25
    IDDList	go to state 26



state 17

    FuncDec  ->  DEF Type . ID '(' ArgsList ')' '{' SList '}' ';'   (rule 21)

    ID  	shift, and go to state 27



state 18

    Program  ->  PROGRAM ID ';' DecList '{' . SList '}' '.'   (rule 1)

    FOR 	shift, and go to state 28
    DOWN	shift, and go to state 29
    WHILE	shift, and go to state 30
    IF  	shift, and go to state 31
    SWITCH	shift, and go to state 32
    BREAK	shift, and go to state 33
    REPEAT	shift, and go to state 34
    CONTINUE	shift, and go to state 35
    RETURN	shift, and go to state 36
    WRITE	shift, and go to state 37
    READ	shift, and go to state 38
    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    VAR 	shift, and go to state 4
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    $default	reduce using rule 28 (SList)

    VarDecs	go to state 48
    VarDec	go to state 10
    SList	go to state 49
    Stmt	go to state 50
    LValue	go to state 51
    Exp 	go to state 52
    ExpRight	go to state 53



state 19

    DecList  ->  Dec DecList .   (rule 2)

    $default	reduce using rule 2 (DecList)



state 20

    VarDecs  ->  VarDec END .   (rule 9)

    $default	reduce using rule 9 (VarDecs)



state 21

    VarDecs  ->  VarDec VarDecs .   (rule 8)

    $default	reduce using rule 8 (VarDecs)



state 22

    FuncDecs  ->  FuncDec END .   (rule 7)

    $default	reduce using rule 7 (FuncDecs)



state 23

    FuncDecs  ->  FuncDec FuncDecs .   (rule 6)

    $default	reduce using rule 6 (FuncDecs)



state 24

    IDDim  ->  ID .   (rule 15)

    $default	reduce using rule 15 (IDDim)



state 25

    IDDim  ->  IDDim . '[' IntNumber ']'   (rule 16)
    IDDList  ->  IDDim . ','   (rule 17)
    IDDList  ->  IDDim .   (rule 18)

    '[' 	shift, and go to state 54
    ',' 	shift, and go to state 55

    $default	reduce using rule 18 (IDDList)



state 26

    VarDec  ->  VAR Type IDDList . ';'   (rule 10)

    ';' 	shift, and go to state 56



state 27

    FuncDec  ->  DEF Type ID . '(' ArgsList ')' '{' SList '}' ';'   (rule 21)

    '(' 	shift, and go to state 57



state 28

    Stmt  ->  FOR . LValue '=' Exp '(' TO   (rule 31)

    ID  	shift, and go to state 41

    LValue	go to state 58



state 29

    Stmt  ->  DOWN . TO ')' Exp DO Block   (rule 32)

    TO  	shift, and go to state 59



state 30

    Stmt  ->  WHILE . Exp DO Block   (rule 33)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 60
    ExpRight	go to state 53



state 31

    Stmt  ->  IF . Exp THEN Block   (rule 34)
    Stmt  ->  IF . Exp THEN Block ELSE Block   (rule 35)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 61
    ExpRight	go to state 53



state 32

    Stmt  ->  SWITCH . Exp OF '{' Cases '}'   (rule 36)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 62
    ExpRight	go to state 53



state 33

    Stmt  ->  BREAK .   (rule 37)

    $default	reduce using rule 37 (Stmt)



state 34

    Stmt  ->  REPEAT . Block UNTIL Exp   (rule 38)

    FOR 	shift, and go to state 28
    DOWN	shift, and go to state 29
    WHILE	shift, and go to state 30
    IF  	shift, and go to state 31
    SWITCH	shift, and go to state 32
    BREAK	shift, and go to state 33
    REPEAT	shift, and go to state 34
    CONTINUE	shift, and go to state 35
    RETURN	shift, and go to state 36
    WRITE	shift, and go to state 37
    READ	shift, and go to state 38
    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    VAR 	shift, and go to state 4
    '-' 	shift, and go to state 46
    '{' 	shift, and go to state 63
    '(' 	shift, and go to state 47

    VarDecs	go to state 48
    VarDec	go to state 10
    Stmt	go to state 64
    LValue	go to state 51
    Exp 	go to state 52
    ExpRight	go to state 53
    Block	go to state 65



state 35

    Stmt  ->  CONTINUE .   (rule 39)

    $default	reduce using rule 39 (Stmt)



state 36

    Stmt  ->  RETURN . Exp   (rule 40)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 66
    ExpRight	go to state 53



state 37

    Stmt  ->  WRITE . ExpPlus   (rule 41)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    ExpPlus	go to state 67
    LValue	go to state 51
    Exp 	go to state 68
    ExpRight	go to state 53



state 38

    Stmt  ->  READ . '(' LValue ')'   (rule 42)

    '(' 	shift, and go to state 69



state 39

    ExpRight  ->  TRUE .   (rule 91)

    $default	reduce using rule 91 (ExpRight)



state 40

    ExpRight  ->  FALSE .   (rule 92)

    $default	reduce using rule 92 (ExpRight)



state 41

    LValue  ->  ID . IDDRight   (rule 68)

    '[' 	shift, and go to state 70

    $default	reduce using rule 67 (IDDRight)

    IDDRight	go to state 71



state 42

    ExpRight  ->  IntNumber .   (rule 86)

    $default	reduce using rule 86 (ExpRight)



state 43

    ExpRight  ->  RealNumber .   (rule 87)

    $default	reduce using rule 87 (ExpRight)



state 44

    ExpRight  ->  STRING .   (rule 90)

    $default	reduce using rule 90 (ExpRight)



state 45

    ExpRight  ->  CHARACTER .   (rule 89)

    $default	reduce using rule 89 (ExpRight)



state 46

    ExpRight  ->  '-' . Exp   (rule 93)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 72
    ExpRight	go to state 53



state 47

    ExpRight  ->  '(' . Exp ')'   (rule 95)
    ExpRight  ->  '(' . ID '(' ExpList ')' ')'   (rule 96)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 73
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 74
    ExpRight	go to state 53



state 48

    Stmt  ->  VarDecs .   (rule 30)

    $default	reduce using rule 30 (Stmt)



state 49

    Program  ->  PROGRAM ID ';' DecList '{' SList . '}' '.'   (rule 1)

    '}' 	shift, and go to state 75



state 50

    SList  ->  Stmt . ';' SList   (rule 27)

    ';' 	shift, and go to state 76



state 51

    ExpRight  ->  LValue .   (rule 88)
    ExpRight  ->  LValue . '=' Exp   (rule 94)

    '=' 	shift, and go to state 77

    $default	reduce using rule 88 (ExpRight)



state 52

    Stmt  ->  Exp .   (rule 29)
    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    IN  	shift, and go to state 78
    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 29 (Stmt)



state 53

    Exp  ->  ExpRight .   (rule 71)

    $default	reduce using rule 71 (Exp)



state 54

    IDDim  ->  IDDim '[' . IntNumber ']'   (rule 16)

    IntNumber	shift, and go to state 92



state 55

    IDDList  ->  IDDim ',' .   (rule 17)

    $default	reduce using rule 17 (IDDList)



state 56

    VarDec  ->  VAR Type IDDList ';' .   (rule 10)

    $default	reduce using rule 10 (VarDec)



state 57

    FuncDec  ->  DEF Type ID '(' . ArgsList ')' '{' SList '}' ';'   (rule 21)

    CHAR	shift, and go to state 12
    INT 	shift, and go to state 13
    DOUBLE	shift, and go to state 14
    BOOL	shift, and go to state 15

    $default	reduce using rule 23 (ArgsList)

    Type	go to state 93
    ArgsList	go to state 94
    ArgList	go to state 95
    Arg 	go to state 96



state 58

    Stmt  ->  FOR LValue . '=' Exp '(' TO   (rule 31)

    '=' 	shift, and go to state 97



state 59

    Stmt  ->  DOWN TO . ')' Exp DO Block   (rule 32)

    ')' 	shift, and go to state 98



state 60

    Stmt  ->  WHILE Exp . DO Block   (rule 33)
    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    IN  	shift, and go to state 78
    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    DO  	shift, and go to state 99
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91



state 61

    Stmt  ->  IF Exp . THEN Block   (rule 34)
    Stmt  ->  IF Exp . THEN Block ELSE Block   (rule 35)
    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    THEN	shift, and go to state 100
    IN  	shift, and go to state 78
    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91



state 62

    Stmt  ->  SWITCH Exp . OF '{' Cases '}'   (rule 36)
    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    OF  	shift, and go to state 101
    IN  	shift, and go to state 78
    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91



state 63

    Block  ->  '{' . SList '}'   (rule 98)

    FOR 	shift, and go to state 28
    DOWN	shift, and go to state 29
    WHILE	shift, and go to state 30
    IF  	shift, and go to state 31
    SWITCH	shift, and go to state 32
    BREAK	shift, and go to state 33
    REPEAT	shift, and go to state 34
    CONTINUE	shift, and go to state 35
    RETURN	shift, and go to state 36
    WRITE	shift, and go to state 37
    READ	shift, and go to state 38
    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    VAR 	shift, and go to state 4
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    $default	reduce using rule 28 (SList)

    VarDecs	go to state 48
    VarDec	go to state 10
    SList	go to state 102
    Stmt	go to state 50
    LValue	go to state 51
    Exp 	go to state 52
    ExpRight	go to state 53



state 64

    Block  ->  Stmt .   (rule 97)

    $default	reduce using rule 97 (Block)



state 65

    Stmt  ->  REPEAT Block . UNTIL Exp   (rule 38)

    UNTIL	shift, and go to state 103



state 66

    Stmt  ->  RETURN Exp .   (rule 40)
    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    IN  	shift, and go to state 78
    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 40 (Stmt)



state 67

    Stmt  ->  WRITE ExpPlus .   (rule 41)

    $default	reduce using rule 41 (Stmt)



state 68

    ExpPlus  ->  Exp . ',' ExpPlus   (rule 63)
    ExpPlus  ->  Exp .   (rule 64)
    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    IN  	shift, and go to state 78
    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91
    ',' 	shift, and go to state 104

    $default	reduce using rule 64 (ExpPlus)



state 69

    Stmt  ->  READ '(' . LValue ')'   (rule 42)

    ID  	shift, and go to state 41

    LValue	go to state 105



state 70

    IDDRight  ->  '[' . Exp ']' IDDRight   (rule 66)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 106
    ExpRight	go to state 53



state 71

    LValue  ->  ID IDDRight .   (rule 68)

    $default	reduce using rule 68 (LValue)



state 72

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)
    ExpRight  ->  '-' Exp .   (rule 93)


    $default	reduce using rule 93 (ExpRight)



state 73

    LValue  ->  ID . IDDRight   (rule 68)
    ExpRight  ->  '(' ID . '(' ExpList ')' ')'   (rule 96)

    '[' 	shift, and go to state 70
    '(' 	shift, and go to state 107

    $default	reduce using rule 67 (IDDRight)

    IDDRight	go to state 71



state 74

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)
    ExpRight  ->  '(' Exp . ')'   (rule 95)

    IN  	shift, and go to state 78
    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91
    ')' 	shift, and go to state 108



state 75

    Program  ->  PROGRAM ID ';' DecList '{' SList '}' . '.'   (rule 1)

    '.' 	shift, and go to state 109



state 76

    SList  ->  Stmt ';' . SList   (rule 27)

    FOR 	shift, and go to state 28
    DOWN	shift, and go to state 29
    WHILE	shift, and go to state 30
    IF  	shift, and go to state 31
    SWITCH	shift, and go to state 32
    BREAK	shift, and go to state 33
    REPEAT	shift, and go to state 34
    CONTINUE	shift, and go to state 35
    RETURN	shift, and go to state 36
    WRITE	shift, and go to state 37
    READ	shift, and go to state 38
    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    VAR 	shift, and go to state 4
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    $default	reduce using rule 28 (SList)

    VarDecs	go to state 48
    VarDec	go to state 10
    SList	go to state 110
    Stmt	go to state 50
    LValue	go to state 51
    Exp 	go to state 52
    ExpRight	go to state 53



state 77

    ExpRight  ->  LValue '=' . Exp   (rule 94)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 111
    ExpRight	go to state 53



state 78

    Exp  ->  Exp IN . Range   (rule 85)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    Range	go to state 112
    LValue	go to state 51
    Exp 	go to state 113
    ExpRight	go to state 53



state 79

    Exp  ->  Exp LTE . Exp   (rule 82)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 114
    ExpRight	go to state 53



state 80

    Exp  ->  Exp GTE . Exp   (rule 81)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 115
    ExpRight	go to state 53



state 81

    Exp  ->  Exp EQU . Exp   (rule 83)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 116
    ExpRight	go to state 53



state 82

    Exp  ->  Exp NEQ . Exp   (rule 84)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 117
    ExpRight	go to state 53



state 83

    Exp  ->  Exp LOGIC_AND . Exp   (rule 77)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 118
    ExpRight	go to state 53



state 84

    Exp  ->  Exp LOGIC_OR . Exp   (rule 78)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 119
    ExpRight	go to state 53



state 85

    Exp  ->  Exp '>' . Exp   (rule 80)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 120
    ExpRight	go to state 53



state 86

    Exp  ->  Exp '<' . Exp   (rule 79)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 121
    ExpRight	go to state 53



state 87

    Exp  ->  Exp '+' . Exp   (rule 72)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 122
    ExpRight	go to state 53



state 88

    Exp  ->  Exp '-' . Exp   (rule 73)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 123
    ExpRight	go to state 53



state 89

    Exp  ->  Exp '*' . Exp   (rule 74)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 124
    ExpRight	go to state 53



state 90

    Exp  ->  Exp '/' . Exp   (rule 75)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 125
    ExpRight	go to state 53



state 91

    Exp  ->  Exp '%' . Exp   (rule 76)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 126
    ExpRight	go to state 53



state 92

    IDDim  ->  IDDim '[' IntNumber . ']'   (rule 16)

    ']' 	shift, and go to state 127



state 93

    Arg  ->  Type . IDList   (rule 26)

    ID  	shift, and go to state 128

    IDList	go to state 129



state 94

    FuncDec  ->  DEF Type ID '(' ArgsList . ')' '{' SList '}' ';'   (rule 21)

    ')' 	shift, and go to state 130



state 95

    ArgsList  ->  ArgList .   (rule 22)

    $default	reduce using rule 22 (ArgsList)



state 96

    ArgList  ->  Arg . ';' ArgList   (rule 24)
    ArgList  ->  Arg .   (rule 25)

    ';' 	shift, and go to state 131

    $default	reduce using rule 25 (ArgList)



state 97

    Stmt  ->  FOR LValue '=' . Exp '(' TO   (rule 31)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 132
    ExpRight	go to state 53



state 98

    Stmt  ->  DOWN TO ')' . Exp DO Block   (rule 32)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 133
    ExpRight	go to state 53



state 99

    Stmt  ->  WHILE Exp DO . Block   (rule 33)

    FOR 	shift, and go to state 28
    DOWN	shift, and go to state 29
    WHILE	shift, and go to state 30
    IF  	shift, and go to state 31
    SWITCH	shift, and go to state 32
    BREAK	shift, and go to state 33
    REPEAT	shift, and go to state 34
    CONTINUE	shift, and go to state 35
    RETURN	shift, and go to state 36
    WRITE	shift, and go to state 37
    READ	shift, and go to state 38
    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    VAR 	shift, and go to state 4
    '-' 	shift, and go to state 46
    '{' 	shift, and go to state 63
    '(' 	shift, and go to state 47

    VarDecs	go to state 48
    VarDec	go to state 10
    Stmt	go to state 64
    LValue	go to state 51
    Exp 	go to state 52
    ExpRight	go to state 53
    Block	go to state 134



state 100

    Stmt  ->  IF Exp THEN . Block   (rule 34)
    Stmt  ->  IF Exp THEN . Block ELSE Block   (rule 35)

    FOR 	shift, and go to state 28
    DOWN	shift, and go to state 29
    WHILE	shift, and go to state 30
    IF  	shift, and go to state 31
    SWITCH	shift, and go to state 32
    BREAK	shift, and go to state 33
    REPEAT	shift, and go to state 34
    CONTINUE	shift, and go to state 35
    RETURN	shift, and go to state 36
    WRITE	shift, and go to state 37
    READ	shift, and go to state 38
    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    VAR 	shift, and go to state 4
    '-' 	shift, and go to state 46
    '{' 	shift, and go to state 63
    '(' 	shift, and go to state 47

    VarDecs	go to state 48
    VarDec	go to state 10
    Stmt	go to state 64
    LValue	go to state 51
    Exp 	go to state 52
    ExpRight	go to state 53
    Block	go to state 135



state 101

    Stmt  ->  SWITCH Exp OF . '{' Cases '}'   (rule 36)

    '{' 	shift, and go to state 136



state 102

    Block  ->  '{' SList . '}'   (rule 98)

    '}' 	shift, and go to state 137



state 103

    Stmt  ->  REPEAT Block UNTIL . Exp   (rule 38)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 138
    ExpRight	go to state 53



state 104

    ExpPlus  ->  Exp ',' . ExpPlus   (rule 63)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    ExpPlus	go to state 139
    LValue	go to state 51
    Exp 	go to state 68
    ExpRight	go to state 53



state 105

    Stmt  ->  READ '(' LValue . ')'   (rule 42)

    ')' 	shift, and go to state 140



state 106

    IDDRight  ->  '[' Exp . ']' IDDRight   (rule 66)
    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    IN  	shift, and go to state 78
    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91
    ']' 	shift, and go to state 141



state 107

    ExpRight  ->  '(' ID '(' . ExpList ')' ')'   (rule 96)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    $default	reduce using rule 62 (ExpList)

    ExpList	go to state 142
    ExpPlus	go to state 143
    LValue	go to state 51
    Exp 	go to state 68
    ExpRight	go to state 53



state 108

    ExpRight  ->  '(' Exp ')' .   (rule 95)

    $default	reduce using rule 95 (ExpRight)



state 109

    Program  ->  PROGRAM ID ';' DecList '{' SList '}' '.' .   (rule 1)

    $default	reduce using rule 1 (Program)



state 110

    SList  ->  Stmt ';' SList .   (rule 27)

    $default	reduce using rule 27 (SList)



state 111

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)
    ExpRight  ->  LValue '=' Exp .   (rule 94)

    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 94 (ExpRight)



state 112

    Exp  ->  Exp IN Range .   (rule 85)

    $default	reduce using rule 85 (Exp)



state 113

    Range  ->  Exp . RANGE_DOTS Exp   (rule 43)
    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    IN  	shift, and go to state 78
    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    RANGE_DOTS	shift, and go to state 144
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91



state 114

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp LTE Exp .   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 82 (Exp)



state 115

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp GTE Exp .   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 81 (Exp)



state 116

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp EQU Exp .   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 83 (Exp)



state 117

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp NEQ Exp .   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 84 (Exp)



state 118

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp LOGIC_AND Exp .   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 77 (Exp)



state 119

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp LOGIC_OR Exp .   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    LOGIC_AND	shift, and go to state 83
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 78 (Exp)



state 120

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp '>' Exp .   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 80 (Exp)



state 121

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp '<' Exp .   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 79 (Exp)



state 122

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp '+' Exp .   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 72 (Exp)



state 123

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp '-' Exp .   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 73 (Exp)



state 124

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp '*' Exp .   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)


    $default	reduce using rule 74 (Exp)



state 125

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp '/' Exp .   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)


    $default	reduce using rule 75 (Exp)



state 126

    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp '%' Exp .   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)


    $default	reduce using rule 76 (Exp)



state 127

    IDDim  ->  IDDim '[' IntNumber ']' .   (rule 16)

    $default	reduce using rule 16 (IDDim)



state 128

    IDList  ->  ID . ',' IDList   (rule 19)
    IDList  ->  ID .   (rule 20)

    ',' 	shift, and go to state 145

    $default	reduce using rule 20 (IDList)



state 129

    Arg  ->  Type IDList .   (rule 26)

    $default	reduce using rule 26 (Arg)



state 130

    FuncDec  ->  DEF Type ID '(' ArgsList ')' . '{' SList '}' ';'   (rule 21)

    '{' 	shift, and go to state 146



state 131

    ArgList  ->  Arg ';' . ArgList   (rule 24)

    CHAR	shift, and go to state 12
    INT 	shift, and go to state 13
    DOUBLE	shift, and go to state 14
    BOOL	shift, and go to state 15

    Type	go to state 93
    ArgList	go to state 147
    Arg 	go to state 96



state 132

    Stmt  ->  FOR LValue '=' Exp . '(' TO   (rule 31)
    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    IN  	shift, and go to state 78
    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91
    '(' 	shift, and go to state 148



state 133

    Stmt  ->  DOWN TO ')' Exp . DO Block   (rule 32)
    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    IN  	shift, and go to state 78
    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    DO  	shift, and go to state 149
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91



state 134

    Stmt  ->  WHILE Exp DO Block .   (rule 33)

    $default	reduce using rule 33 (Stmt)



state 135

    Stmt  ->  IF Exp THEN Block .   (rule 34)
    Stmt  ->  IF Exp THEN Block . ELSE Block   (rule 35)

    ELSE	shift, and go to state 150

    $default	reduce using rule 34 (Stmt)



state 136

    Stmt  ->  SWITCH Exp OF '{' . Cases '}'   (rule 36)

    CASE	shift, and go to state 151

    Cases	go to state 152
    Case	go to state 153



state 137

    Block  ->  '{' SList '}' .   (rule 98)

    $default	reduce using rule 98 (Block)



state 138

    Stmt  ->  REPEAT Block UNTIL Exp .   (rule 38)
    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    IN  	shift, and go to state 78
    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 38 (Stmt)



state 139

    ExpPlus  ->  Exp ',' ExpPlus .   (rule 63)

    $default	reduce using rule 63 (ExpPlus)



state 140

    Stmt  ->  READ '(' LValue ')' .   (rule 42)

    $default	reduce using rule 42 (Stmt)



state 141

    IDDRight  ->  '[' Exp ']' . IDDRight   (rule 66)

    '[' 	shift, and go to state 70

    $default	reduce using rule 67 (IDDRight)

    IDDRight	go to state 154



state 142

    ExpRight  ->  '(' ID '(' ExpList . ')' ')'   (rule 96)

    ')' 	shift, and go to state 155



state 143

    ExpList  ->  ExpPlus .   (rule 61)

    $default	reduce using rule 61 (ExpList)



state 144

    Range  ->  Exp RANGE_DOTS . Exp   (rule 43)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    LValue	go to state 51
    Exp 	go to state 156
    ExpRight	go to state 53



state 145

    IDList  ->  ID ',' . IDList   (rule 19)

    ID  	shift, and go to state 128

    IDList	go to state 157



state 146

    FuncDec  ->  DEF Type ID '(' ArgsList ')' '{' . SList '}' ';'   (rule 21)

    FOR 	shift, and go to state 28
    DOWN	shift, and go to state 29
    WHILE	shift, and go to state 30
    IF  	shift, and go to state 31
    SWITCH	shift, and go to state 32
    BREAK	shift, and go to state 33
    REPEAT	shift, and go to state 34
    CONTINUE	shift, and go to state 35
    RETURN	shift, and go to state 36
    WRITE	shift, and go to state 37
    READ	shift, and go to state 38
    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    VAR 	shift, and go to state 4
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    $default	reduce using rule 28 (SList)

    VarDecs	go to state 48
    VarDec	go to state 10
    SList	go to state 158
    Stmt	go to state 50
    LValue	go to state 51
    Exp 	go to state 52
    ExpRight	go to state 53



state 147

    ArgList  ->  Arg ';' ArgList .   (rule 24)

    $default	reduce using rule 24 (ArgList)



state 148

    Stmt  ->  FOR LValue '=' Exp '(' . TO   (rule 31)

    TO  	shift, and go to state 159



state 149

    Stmt  ->  DOWN TO ')' Exp DO . Block   (rule 32)

    FOR 	shift, and go to state 28
    DOWN	shift, and go to state 29
    WHILE	shift, and go to state 30
    IF  	shift, and go to state 31
    SWITCH	shift, and go to state 32
    BREAK	shift, and go to state 33
    REPEAT	shift, and go to state 34
    CONTINUE	shift, and go to state 35
    RETURN	shift, and go to state 36
    WRITE	shift, and go to state 37
    READ	shift, and go to state 38
    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    VAR 	shift, and go to state 4
    '-' 	shift, and go to state 46
    '{' 	shift, and go to state 63
    '(' 	shift, and go to state 47

    VarDecs	go to state 48
    VarDec	go to state 10
    Stmt	go to state 64
    LValue	go to state 51
    Exp 	go to state 52
    ExpRight	go to state 53
    Block	go to state 160



state 150

    Stmt  ->  IF Exp THEN Block ELSE . Block   (rule 35)

    FOR 	shift, and go to state 28
    DOWN	shift, and go to state 29
    WHILE	shift, and go to state 30
    IF  	shift, and go to state 31
    SWITCH	shift, and go to state 32
    BREAK	shift, and go to state 33
    REPEAT	shift, and go to state 34
    CONTINUE	shift, and go to state 35
    RETURN	shift, and go to state 36
    WRITE	shift, and go to state 37
    READ	shift, and go to state 38
    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    VAR 	shift, and go to state 4
    '-' 	shift, and go to state 46
    '{' 	shift, and go to state 63
    '(' 	shift, and go to state 47

    VarDecs	go to state 48
    VarDec	go to state 10
    Stmt	go to state 64
    LValue	go to state 51
    Exp 	go to state 52
    ExpRight	go to state 53
    Block	go to state 161



state 151

    Case  ->  CASE . Exp ':' Block   (rule 46)
    Case  ->  CASE . Range ':' Block   (rule 47)

    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    '-' 	shift, and go to state 46
    '(' 	shift, and go to state 47

    Range	go to state 162
    LValue	go to state 51
    Exp 	go to state 163
    ExpRight	go to state 53



state 152

    Stmt  ->  SWITCH Exp OF '{' Cases . '}'   (rule 36)

    '}' 	shift, and go to state 164



state 153

    Cases  ->  Case . Cases '.'   (rule 44)
    Cases  ->  Case . END   (rule 45)

    CASE	shift, and go to state 151
    END 	shift, and go to state 165

    Cases	go to state 166
    Case	go to state 153



state 154

    IDDRight  ->  '[' Exp ']' IDDRight .   (rule 66)

    $default	reduce using rule 66 (IDDRight)



state 155

    ExpRight  ->  '(' ID '(' ExpList ')' . ')'   (rule 96)

    ')' 	shift, and go to state 167



state 156

    Range  ->  Exp RANGE_DOTS Exp .   (rule 43)
    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91

    $default	reduce using rule 43 (Range)



state 157

    IDList  ->  ID ',' IDList .   (rule 19)

    $default	reduce using rule 19 (IDList)



state 158

    FuncDec  ->  DEF Type ID '(' ArgsList ')' '{' SList . '}' ';'   (rule 21)

    '}' 	shift, and go to state 168



state 159

    Stmt  ->  FOR LValue '=' Exp '(' TO .   (rule 31)

    $default	reduce using rule 31 (Stmt)



state 160

    Stmt  ->  DOWN TO ')' Exp DO Block .   (rule 32)

    $default	reduce using rule 32 (Stmt)



state 161

    Stmt  ->  IF Exp THEN Block ELSE Block .   (rule 35)

    $default	reduce using rule 35 (Stmt)



state 162

    Case  ->  CASE Range . ':' Block   (rule 47)

    ':' 	shift, and go to state 169



state 163

    Range  ->  Exp . RANGE_DOTS Exp   (rule 43)
    Case  ->  CASE Exp . ':' Block   (rule 46)
    Exp  ->  Exp . '+' Exp   (rule 72)
    Exp  ->  Exp . '-' Exp   (rule 73)
    Exp  ->  Exp . '*' Exp   (rule 74)
    Exp  ->  Exp . '/' Exp   (rule 75)
    Exp  ->  Exp . '%' Exp   (rule 76)
    Exp  ->  Exp . LOGIC_AND Exp   (rule 77)
    Exp  ->  Exp . LOGIC_OR Exp   (rule 78)
    Exp  ->  Exp . '<' Exp   (rule 79)
    Exp  ->  Exp . '>' Exp   (rule 80)
    Exp  ->  Exp . GTE Exp   (rule 81)
    Exp  ->  Exp . LTE Exp   (rule 82)
    Exp  ->  Exp . EQU Exp   (rule 83)
    Exp  ->  Exp . NEQ Exp   (rule 84)
    Exp  ->  Exp . IN Range   (rule 85)

    IN  	shift, and go to state 78
    LTE 	shift, and go to state 79
    GTE 	shift, and go to state 80
    EQU 	shift, and go to state 81
    NEQ 	shift, and go to state 82
    RANGE_DOTS	shift, and go to state 144
    LOGIC_AND	shift, and go to state 83
    LOGIC_OR	shift, and go to state 84
    '>' 	shift, and go to state 85
    '<' 	shift, and go to state 86
    '+' 	shift, and go to state 87
    '-' 	shift, and go to state 88
    '*' 	shift, and go to state 89
    '/' 	shift, and go to state 90
    '%' 	shift, and go to state 91
    ':' 	shift, and go to state 170



state 164

    Stmt  ->  SWITCH Exp OF '{' Cases '}' .   (rule 36)

    $default	reduce using rule 36 (Stmt)



state 165

    Cases  ->  Case END .   (rule 45)

    $default	reduce using rule 45 (Cases)



state 166

    Cases  ->  Case Cases . '.'   (rule 44)

    '.' 	shift, and go to state 171



state 167

    ExpRight  ->  '(' ID '(' ExpList ')' ')' .   (rule 96)

    $default	reduce using rule 96 (ExpRight)



state 168

    FuncDec  ->  DEF Type ID '(' ArgsList ')' '{' SList '}' . ';'   (rule 21)

    ';' 	shift, and go to state 172



state 169

    Case  ->  CASE Range ':' . Block   (rule 47)

    FOR 	shift, and go to state 28
    DOWN	shift, and go to state 29
    WHILE	shift, and go to state 30
    IF  	shift, and go to state 31
    SWITCH	shift, and go to state 32
    BREAK	shift, and go to state 33
    REPEAT	shift, and go to state 34
    CONTINUE	shift, and go to state 35
    RETURN	shift, and go to state 36
    WRITE	shift, and go to state 37
    READ	shift, and go to state 38
    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    VAR 	shift, and go to state 4
    '-' 	shift, and go to state 46
    '{' 	shift, and go to state 63
    '(' 	shift, and go to state 47

    VarDecs	go to state 48
    VarDec	go to state 10
    Stmt	go to state 64
    LValue	go to state 51
    Exp 	go to state 52
    ExpRight	go to state 53
    Block	go to state 173



state 170

    Case  ->  CASE Exp ':' . Block   (rule 46)

    FOR 	shift, and go to state 28
    DOWN	shift, and go to state 29
    WHILE	shift, and go to state 30
    IF  	shift, and go to state 31
    SWITCH	shift, and go to state 32
    BREAK	shift, and go to state 33
    REPEAT	shift, and go to state 34
    CONTINUE	shift, and go to state 35
    RETURN	shift, and go to state 36
    WRITE	shift, and go to state 37
    READ	shift, and go to state 38
    TRUE	shift, and go to state 39
    FALSE	shift, and go to state 40
    ID  	shift, and go to state 41
    IntNumber	shift, and go to state 42
    RealNumber	shift, and go to state 43
    STRING	shift, and go to state 44
    CHARACTER	shift, and go to state 45
    VAR 	shift, and go to state 4
    '-' 	shift, and go to state 46
    '{' 	shift, and go to state 63
    '(' 	shift, and go to state 47

    VarDecs	go to state 48
    VarDec	go to state 10
    Stmt	go to state 64
    LValue	go to state 51
    Exp 	go to state 52
    ExpRight	go to state 53
    Block	go to state 174



state 171

    Cases  ->  Case Cases '.' .   (rule 44)

    $default	reduce using rule 44 (Cases)



state 172

    FuncDec  ->  DEF Type ID '(' ArgsList ')' '{' SList '}' ';' .   (rule 21)

    $default	reduce using rule 21 (FuncDec)



state 173

    Case  ->  CASE Range ':' Block .   (rule 47)

    $default	reduce using rule 47 (Case)



state 174

    Case  ->  CASE Exp ':' Block .   (rule 46)

    $default	reduce using rule 46 (Case)



state 175

    $   	go to state 176



state 176

    $   	go to state 177



state 177

    $default	accept
